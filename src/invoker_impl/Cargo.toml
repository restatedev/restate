[package]
name = "restate_invoker_impl"
version.workspace = true
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
publish = false

[features]
default = []
options_schema = ["dep:schemars", "restate_types/serde_schema"]

[dependencies]
anyhow = { workspace = true }
bytes = { workspace = true }
codederror = { workspace = true }
derive_builder = { workspace = true }
drain = { workspace = true }
futures = { workspace = true }
h2 = { version = "0.3.20" }
humantime = { workspace = true }
hyper = { workspace = true, features = ["http1", "http2", "client", "tcp", "stream", "runtime"] }
itertools = { workspace = true }
opentelemetry = { workspace = true }
opentelemetry-http = { workspace = true }
restate_errors = { workspace = true }
restate_fs_util = { workspace = true }
restate_futures_util = { workspace = true }
restate_invoker_api = { workspace = true }
restate_service_client = { workspace = true }
restate_queue = { workspace = true }
restate_schema_api = { workspace = true, features = ["endpoint"] }
restate_service_protocol = { workspace = true, features = ["message"] }
restate_timer_queue = { workspace = true }
restate_types = { workspace = true, features = ["serde"] }
schemars = { workspace = true, optional = true }
serde = { workspace = true }
serde_with = { workspace = true }
thiserror = { workspace = true }
tokio = { workspace = true }
tracing = { workspace = true }
tracing-opentelemetry = { workspace = true }

[dev-dependencies]
prost = { workspace = true }
restate_invoker_api = { workspace = true, features = ["mocks"] }
restate_schema_api = { workspace = true, features = ["mocks"] }
restate_service_protocol = { workspace = true, features = ["codec"] }
restate_test_util = { workspace = true }
restate_types = { workspace = true }
tempfile = { workspace = true }
tracing-subscriber = { workspace = true }
uuid = { workspace = true }
