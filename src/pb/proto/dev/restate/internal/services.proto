// Copyright (c) 2023 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

/*
  This package contains internal service interfaces
 */
package dev.restate.internal;

import "dev/restate/ext.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "dev/restate/internal/messages.proto";

service Proxy {
  // Proxy invocation through this service. This service is mostly used for proxying invocations through a specific partition processor, e.g. to reuse the deduplication id map.
  rpc ProxyThrough(ProxyThroughRequest) returns (google.protobuf.Empty);
}

message ProxyThroughRequest {
  string target_service = 1;
  string target_method = 2;
  bytes target_key = 3;
  bytes target_invocation_uuid = 4;

  bytes input = 5;
}

// RemoteContext service to implement the embedded handler API
service RemoteContext {
  option (dev.restate.ext.service_type) = KEYED;

  // Start a new invocation, or resume a previously existing one.
  //
  // If another client is already executing this invocation, it will be fenced off and this client will take precedence.
  //
  // This method is not idempotent.
  rpc Start(StartRequest) returns (StartResponse);

  // Send new messages to append to the message stream.
  //
  // This method is not idempotent, and a request can fail for several reasons,
  // including errors in sent messages, or some other transient error.
  // The client should consider the stream in an unrecoverable error state and it can retry
  // by creating a new stream through Start() with a different stream_id.
  //
  // Once the invocation is completed, subsequent Send fail.
  rpc Send(SendRequest) returns (SendResponse);

  // Receive new messages from the message stream.
  //
  // This method is not idempotent, and a request can fail for several reasons,
  // including errors in sent messages, or some other transient error.
  // The client should consider the stream in an unrecoverable error state and it can retry
  // by creating a new stream through Start() with a different stream_id.
  //
  // If the invocation is completed, Recv returns a response with messages field empty.
  rpc Recv(RecvRequest) returns (RecvResponse);

  // Get the result of the invocation.
  //
  // In case another client is executing the invocation (through a sequence of Start/Send/Recv), this method will block
  // until a response is computed.
  // In case the response is already available, it will return immediately with the response.
  // In case no client is executing the invocation, that is no client ever invoked Start() for the given operation_id,
  // this method will return response.none.
  //
  // This method can be safely invoked by multiple clients and it's idempotent.
  rpc GetResult(GetResultRequest) returns (GetResultResponse);

  // Cleanup all the state of the invocation, excluding the user state.
  //
  // This is automatically executed when retention_period_sec is past, but it can be manually invoked before the expiry time elapsed.
  rpc Cleanup(CleanupRequest) returns (google.protobuf.Empty);
}

message StartRequest {
  // User provided operation id, this is used as idempotency key.
  string operation_id = 1 [(dev.restate.ext.field) = KEY];

  // Stream id to uniquely identify a open stream between client and Restate.
  // There can be at most one open stream at the same time.
  string stream_id = 2;

  // Retention period for the response in seconds.
  // After the invocation completes, the response will be persisted for the given duration.
  // Afterwards, the system will cleanup the response and treats any subsequent invocation with same operation_id as new.
  //
  // If not set, 30 minutes will be used as retention period.
  uint32 retention_period_sec = 3;

  // Argument of the invocation
  bytes argument = 4;
}

message StartResponse {
  oneof invocation_status {
    // Contains the concatenated first messages of the stream, encoded using the same framing used by service-protocol
    bytes executing = 1;

    // Contains the result of the invocation
    GetResultResponse completed = 2;
  }
}

message SendRequest {
  // User provided operation id, this is used as idempotency key.
  string operation_id = 1 [(dev.restate.ext.field) = KEY];

  // Stream id to uniquely identify a open stream between client and Restate.
  // There can be at most one open stream at the same time.
  string stream_id = 2;

  // Contains the concatenated messages of the stream, encoded using the same framing used by service-protocol
  bytes messages = 3;
}

message SendResponse {
  oneof response {
    google.protobuf.Empty ok = 1;

    // This means the provided stream_id is invalid, and it should not be reused,
    // nor the client should create a new stream using Start().
    // The client can instead read the invocation result using GetResult().
    google.protobuf.Empty invalid_stream = 2;

    // This means the invocation is completed, and the result should be collected using GetResult
    google.protobuf.Empty invocation_completed = 3;
  }
}

message RecvRequest {
  // User provided operation id, this is used as idempotency key.
  string operation_id = 1 [(dev.restate.ext.field) = KEY];

  // Stream id to uniquely identify a open stream between client and Restate.
  // There can be at most one open stream at the same time.
  string stream_id = 2;
}

message RecvResponse {
  oneof response {
    // Contains the concatenated messages of the stream, encoded using the same framing used by service-protocol
    bytes messages = 1;

    // This means the provided stream_id is invalid, and it should not be reused,
    // nor the client should create a new stream using Start().
    // The client can instead read the invocation result using GetResult().
    google.protobuf.Empty invalid_stream = 2;

    // This means the invocation is completed, and the result should be collected using GetResult
    google.protobuf.Empty invocation_completed = 3;
  }
}

message GetResultRequest {
  // User provided operation id, this is used as idempotency key.
  string operation_id = 1 [(dev.restate.ext.field) = KEY];
}

message GetResultResponse {
  message InvocationFailure {
    uint32 code = 1;
    string message = 2;
  }

  oneof response {
    // See GetResult documentation
    google.protobuf.Empty none = 1;
    bytes success = 2;
    InvocationFailure failure = 3;
  }

  // Timestamp of the response expiry time in RFC3339.
  // Empty if response = none
  string expiry_time = 15;
}

message CleanupRequest {
  // User provided operation id, this is used as idempotency key.
  string operation_id = 1 [(dev.restate.ext.field) = KEY];
}

service IdempotentInvoker {
  // Invoke a service in an idempotent fashion.
  // If already invoked, this will return the cached response.
  // The response will be cleaned up after a retention period.
  rpc Invoke(IdempotentInvokeRequest) returns (IdempotentInvokeResponse);
}

message IdempotentInvokeRequest {
  // Idempotency id.
  bytes idempotency_id = 1;

  // FullInvocationIdentifier
  string service_name = 2;
  bytes service_key = 3;
  bytes invocation_uuid = 4;

  // Method name of the service to invoke, e.g. `Add`
  string method = 5;

  // Argument of the invocation.
  bytes argument = 6;

  // Retention period for the response in seconds.
  // After the invocation completes, the response will be persisted for the given duration.
  // Afterwards, the system will cleanup the response and treats any subsequent invocation with same id as new.
  //
  // If not set, 30 minutes will be used as retention period.
  uint32 retention_period_sec = 7;
}

message IdempotentInvokeResponse {
  // Invocation response.
  // The response will be provided in the same format used for the request.
  oneof response {
    bytes success = 1;
    InvocationFailure failure = 2;
  }

  // Timestamp of the response expiry time in RFC3339.
  string expiry_time = 3;
}
