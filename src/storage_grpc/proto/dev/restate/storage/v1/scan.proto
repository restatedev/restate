syntax = "proto3";

package dev.restate.storage.scan.v1;

service Storage {
  rpc Scan(ScanRequest) returns (stream Pair) {}
}

message ScanRequest {
  oneof filter {
    // provide a single key that should be returned as one item
    Key key = 2;
    // provide a prefix key that may match multiple keys
    Key prefix = 3;
    // provide an inclusive range of a start and end (potentially prefix) key
    Range range = 4;
  }
}

message Pair {
  Key key = 1;
  // the opaque stored protobuf data for this row
  bytes value = 2;
}

message Deduplication {
  optional uint64 partition_id = 1;
  optional uint64 producing_partition_id = 2;
}

message PartitionStateMachine {
  optional uint64 partition_id = 1;
  optional uint64 state_id = 2;
}

message Inbox {
  optional uint32 partition_key = 1;
  optional string service_name = 2;
  optional bytes service_key = 3;
  optional uint64 sequence_number = 4;
}

message Journal {
  optional uint32 partition_key = 1;
  optional string service_name = 2;
  optional bytes service_key = 3;
  optional uint32 journal_index = 4;
}

message Outbox {
  optional uint64 partition_id = 1;
  optional uint64 message_index = 2;
}

message State {
  optional uint32 partition_key = 1;
  optional string service_name = 2;
  optional bytes service_key = 3;
  optional bytes state_key = 4;
}

message Status {
  optional uint32 partition_key = 1;
  optional string service_name = 2;
  optional bytes service_key = 3;
}

message Timers {
  optional uint64 partition_id = 1;
  optional uint64 timestamp = 2;
  optional string service_name = 3;
  optional bytes service_key = 4;
  optional bytes invocation_id = 5;
  optional uint32 journal_index = 6;
}

message Key {
  oneof key {
    Deduplication deduplication = 1;
    PartitionStateMachine partition_state_machine = 2;
    Inbox inbox = 3;
    Journal journal = 4;
    Outbox outbox = 5;
    State state = 6;
    Status status = 7;
    Timers timers = 8;
  }
}

message Range {
  // the first key that should be returned, or the first matching key if this is partial
  Key start = 1;
  // the last key that should be returned, or the last matching key if this is partial
  Key end = 2;
}
