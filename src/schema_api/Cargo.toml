[package]
name = "restate_schema_api"
version.workspace = true
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
publish = false

[features]
default = []
serde = ["dep:serde", "dep:serde_with", "restate_types?/serde", "dep:restate_serde_util"]
serde_schema = ["serde", "dep:schemars", "restate_types?/serde_schema", "restate_serde_util?/schema"]
key_extraction = ["dep:bytes", "dep:thiserror", "dep:anyhow", "dep:prost"]
key_expansion = ["dep:bytes", "dep:thiserror", "dep:prost", "dep:prost-reflect", "dep:anyhow"]
json_key_conversion = ["key_extraction", "key_expansion", "dep:serde_json", "dep:thiserror"]
endpoint = ["dep:restate_types", "dep:http", "dep:base64", "dep:restate_base64_util"]
service = ["dep:restate_types"]
json_conversion = ["dep:prost-reflect", "prost-reflect?/serde", "dep:anyhow"]
proto_symbol = ["dep:bytes"]
subscription = ["dep:anyhow"]
mocks = []

[dependencies]
anyhow = { workspace = true, optional = true }
base64 = { workspace = true, optional = true }
bytes = { workspace = true, optional = true }
http = { workspace = true, optional = true }
prost = { workspace = true, optional = true }
prost-reflect = { workspace = true, optional = true }
restate_base64_util = { workspace = true, optional = true }
restate_types = { workspace = true, optional = true }
restate_serde_util = { workspace = true, optional = true }
schemars = { workspace = true, optional = true }
serde = { workspace = true, optional = true }
serde_with = { workspace = true, optional = true }
serde_json = { workspace = true, optional = true }
thiserror = { workspace = true, optional = true }