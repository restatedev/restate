[workspace]
members = [
    "cli",
    "crates/*",
    "crates/codederror/derive",
    "server",
    "tools/service-protocol-wireshark-dissector",
    "tools/xtask",
]
default-members = [
    "cli",
    "crates/*",
    "crates/codederror/derive",
    "server",
    "tools/xtask",
]
resolver = "2"

[workspace.package]
version = "0.7.0"
authors = ["restate.dev"]
edition = "2021"
rust-version = "1.72"
license = "BUSL-1.1"
repository = "https://github.com/restatedev/restate"
description = "Restate makes distributed applications easy!"

[workspace.dependencies]
# Own crates
codederror = { path = "crates/codederror" }
restate-base64-util = { path = "crates/base64-util" }
restate-benchmarks = { path = "crates/benchmarks" }
restate-consensus = { path = "crates/consensus" }
restate-errors = { path = "crates/errors" }
restate-fs-util = { path = "crates/fs-util" }
restate-futures-util = { path = "crates/futures-util" }
restate-ingress-dispatcher = { path = "crates/ingress-dispatcher" }
restate-ingress-grpc = { path = "crates/ingress-grpc" }
restate-ingress-kafka = { path = "crates/ingress-kafka" }
restate-invoker-api = { path = "crates/invoker-api" }
restate-invoker-impl = { path = "crates/invoker-impl" }
restate-meta = { path = "crates/meta" }
restate-meta-rest-model = { path = "crates/meta-rest-model" }
restate-network = { path = "crates/network" }
restate-pb = { path = "crates/pb" }
restate-queue = { path = "crates/queue" }
restate-schema-api = { path = "crates/schema-api" }
restate-schema-impl = { path = "crates/schema-impl" }
restate-serde-util = { path = "crates/serde-util" }
restate-server = { path = "server" }
restate-service-client = { path = "crates/service-client" }
restate-service-protocol = { path = "crates/service-protocol" }
restate-storage-api = { path = "crates/storage-api" }
restate-storage-proto = { path = "crates/storage-proto" }
restate-storage-query-datafusion = { path = "crates/storage-query-datafusion" }
restate-storage-query-http = { path = "crates/storage-query-http" }
restate-storage-query-postgres = { path = "crates/storage-query-postgres" }
restate-storage-rocksdb = { path = "crates/storage-rocksdb" }
restate-test-util = { path = "crates/test-util" }
restate-timer = { path = "crates/timer" }
restate-timer-queue = { path = "crates/timer-queue" }
restate-tracing-instrumentation = { path = "crates/tracing-instrumentation" }
restate-types = { path = "crates/types" }
restate-worker = { path = "crates/worker" }
restate-worker-api = { path = "crates/worker-api" }

# External crates
ahash = "0.8.5"
anyhow = "1.0.68"
arc-swap = "1.6"
assert2 = "0.3.11"
async-trait = "0.1.73"
base64 = "0.21"
bincode = { version = "2.0.0-rc", default-features = false, features = [ "std", "serde", ] }
bytes = { version = "1.3", features = ["serde"] }
bytes-utils = "0.1.3"
bytestring = { version = "1.2", features = ["serde"] }
criterion = "0.5"
chrono = { version = "0.4.31", default-features = false, features = ["clock"] }
datafusion = { version = "31.0.0" }
datafusion-expr = { version = "31.0.0" }
derive_builder = "0.12.0"
drain = "0.1.1"
futures = "0.3.25"
futures-sink = "0.3.25"
futures-util = "0.3.25"
googletest = "0.10"
http = "0.2.9"
humantime = "2.1.0"
hyper = { version = "0.14.24", default-features = false }
hyper-rustls = { version = "0.24.1", features = ["http2"] }
itertools = "0.11.0"
once_cell = "1.18"
opentelemetry = { version = "0.20.0" }
opentelemetry-http = { version = "0.9.0" }
opentelemetry_api = { version = "0.20.0" }
paste = "1.0"
pin-project = "1.0"
prost = "0.12.1"
prost-build = "0.12.1"
prost-reflect = "0.12.0"
prost-types = "0.12.1"
rand = "0.8.5"
rocksdb = "0.21.0"
rustls = "0.21.6"
schemars = { version = "0.8", features = ["bytes"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_with = "2.2"
serde_yaml = "0.9"
tempfile = "3.6.0"
thiserror = "1.0"
tokio = { version = "1.29", default-features = false, features = [ "rt-multi-thread", "signal", "macros", ] }
tokio-stream = "0.1.14"
tonic = { version = "0.10.2", default-features = false }
tonic-build = "0.10.2"
tower = "0.4"
tracing = "0.1"
tracing-opentelemetry = { version = "0.21.0" }
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
uuid = { version = "1.3.0", features = ["v7", "serde"] }


[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1
# Let's be defensive and abort on every panic
panic = "abort"

[profile.dev]
# Let's be defensive and abort on every panic
panic = "abort"

[profile.release.package.service-protocol-wireshark-dissector]
opt-level = "z" # Optimize for size.
strip = true    # Automatically strip symbols from the binary.

[profile.bench]
# Should be enabled for benchmarking runs; increases binary size
debug = true
