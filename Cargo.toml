[workspace]
members = [
    "src/*",
    "src/codederror/impl",
    "tools/xtask",
    "tools/service_protocol_wireshark_dissector"
]
default-members = [ "src/*", "src/codederror/impl" ]
resolver = "2"

[workspace.package]
version = "0.3.0"
authors = ["restate.dev"]
edition = "2021"
rust-version = "1.66"
license = "BUSL-1.1"
repository = "https://github.com/restatedev/restate"
description = "Restate makes distributed applications easy!"

[workspace.dependencies]
async-trait = "0.1.73"
anyhow = "1.0.68"
arc-swap = "1.6"
assert2 = "0.3.11"
base64 = "0.21"
bincode = { version = "2.0.0-rc", default-features = false, features = ["std", "serde"] }
bytes = { version = "1.3", features = ["serde"] }
bytestring = { version = "1.2", features = ["serde"] }
bytes-utils = "0.1.3"
criterion = "0.5"
derive_builder = "0.12.0"
futures = "0.3.25"
futures-sink = "0.3.25"
futures-util = "0.3.25"
googletest = "0.10"
datafusion = { version = "31.0.0" }
datafusion-expr = { version = "31.0.0" }
drain = "0.1.1"
hyper = { version = "0.14.24", default-features = false }
hyper-rustls = { version = "0.24.1", features = ["http2"] }
http = "0.2.9"
humantime = "2.1.0"
itertools = "0.11.0"
paste = "1.0"
pin-project = "1.0"
prost = "0.12.1"
prost-types = "0.12.1"
prost-reflect = "0.12.0"
prost-build = "0.12.1"
rand = "0.8.5"
rocksdb = "0.21.0"
schemars = { version = "0.8", features = ["bytes"] }
serde = { version = "1.0", features = ["derive"] }
serde_with = "2.2"
serde_json = "1.0"
tempfile = "3.6.0"
thiserror = "1.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tokio = { version = "1.29", default-features = false, features = ["rt-multi-thread", "signal", "macros"] }
tokio-stream = "0.1.14"
tonic = { version = "0.10.2", default-features = false }
tonic-build = "0.10.2"
tower = "0.4"
opentelemetry_api = { version = "0.20.0" }
opentelemetry = { version = "0.20.0" }
opentelemetry-http = { version = "0.9.0" }
tracing-opentelemetry = { version = "0.21.0" }
uuid = { version = "1.3.0", features = ["v7", "serde"] }

# Own crates
codederror = { path = "src/codederror" }
restate = { path = "src/restate" }
restate_base64_util = { path = "src/base64_util" }
restate_benchmarks = { path = "src/benchmarks" }
restate_consensus = { path = "src/consensus" }
restate_errors = { path = "src/errors" }
restate_fs_util = { path = "src/fs_util" }
restate_futures_util = { path = "src/futures_util" }
restate_hyper_util = { path = "src/hyper_util" }
restate_ingress_dispatcher = { path = "src/ingress_dispatcher" }
restate_ingress_grpc = { path = "src/ingress_grpc" }
restate_ingress_kafka = { path = "src/ingress_kafka" }
restate_invoker_api = { path = "src/invoker_api" }
restate_invoker_impl = { path = "src/invoker_impl" }
restate_queue = { path = "src/queue"}
restate_meta = { path = "src/meta" }
restate_network = { path = "src/network" }
restate_pb = { path = "src/pb" }
restate_schema_api = { path = "src/schema_api" }
restate_schema_impl = { path = "src/schema_impl" }
restate_serde_util = { path = "src/serde_util" }
restate_service_protocol = { path = "src/service_protocol" }
restate_storage_api = {path = "src/storage_api"}
restate_storage_proto = {path = "src/storage_proto"}
restate_storage_query_datafusion = {path = "src/storage_query_datafusion" }
restate_storage_query_http = {path = "src/storage_query_http" }
restate_storage_query_postgres = {path = "src/storage_query_postgres" }
restate_storage_rocksdb = { path = "src/storage_rocksdb" }
restate_test_util = { path = "src/test_util" }
restate_timer = { path = "src/timer" }
restate_timer_queue = { path = "src/timer_queue" }
restate_tracing_instrumentation = { path = "src/tracing_instrumentation" }
restate_types = { path = "src/types" }
restate_worker = { path = "src/worker" }
restate_worker_api = { path = "src/worker_api" }

[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1
# Let's be defensive and abort on every panic
panic = "abort"

[profile.dev]
# Let's be defensive and abort on every panic
panic = "abort"

[profile.release.package.service_protocol_wireshark_dissector]
opt-level = "z"  # Optimize for size.
strip = true  # Automatically strip symbols from the binary.

[profile.bench]
# Should be enabled for benchmarking runs; increases binary size
debug = true
