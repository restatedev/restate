[workspace]
members = [
    "src/*",
    "src/codederror/impl"
]
exclude = ["src/service_protocol_wireshark_dissector"]

[workspace.package]
version = "0.1.0"
authors = ["restate.dev"]
edition = "2021"
rust-version = "1.66"
license = "BUSL-1.1"
repository = "https://github.com/restatedev/restate"
description = "Restate makes distributed applications easy!"

[workspace.dependencies]
anyhow = "1.0.68"
arc-swap = "1.6"
assert2 = "0.3.10"
bytes = { version = "1.3", features = ["serde"] }
bytestring = { version = "1.2", features = ["serde"] }
bytes-utils = "0.1.3"
futures = "0.3.25"
futures-sink = "0.3.25"
futures-util = "0.3.25"
drain = "0.1.1"
hyper = { version = "0.14.24", default-features = false }
hyper-rustls = { version = "0.23.2", features = ["http2"] }
humantime = "2.1.0"
paste = "1.0"
pin-project = "1.0"
prost = "0.11"
prost-types = "0.11"
prost-reflect = "0.11.1"
prost-build = "0.11"
serde = { version = "1.0", features = ["derive"] }
serde_with = "2.2"
thiserror = "1.0"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tokio = { version = "1.24", features = ["rt-multi-thread", "signal", "macros"] }
tokio-stream = "0.1.11"
tonic = { version = "0.8.3", default-features = false }
tonic-build = "0.8.4"
tower = "0.4"
opentelemetry_api = { version = "0.18" }
opentelemetry = { version = "0.18" }
opentelemetry-http = { version = "0.7" }
tracing-opentelemetry = { version = "0.18" }
uuid = { version = "1.3.0", features = ["v7", "serde"] }

# Own crates
codederror = { path = "src/codederror" }
common = { path = "src/common" }
consensus = { path = "src/consensus" }
errors = { path = "src/errors" }
futures_util = { path = "src/futures_util" }
ingress_grpc = { path = "src/ingress_grpc" }
queue = { path = "src/queue"}
invoker = { path = "src/invoker" }
journal = { path = "src/journal" }
meta = { path = "src/meta" }
network = { path = "src/network" }
service_key_extractor = { path = "src/service_key_extractor" }
service_metadata = { path = "src/service_metadata" }
service_protocol = { path = "src/service_protocol" }
storage_api = {path = "src/storage_api"}
storage_proto = {path = "src/storage_proto"}
storage_rocksdb = { path = "src/storage_rocksdb" }
test_utils = { path = "src/test_utils" }
timer = { path = "src/timer" }
timer_queue = { path = "src/timer_queue" }
tracing_instrumentation = { path = "src/tracing_instrumentation" }
worker = { path = "src/worker" }

[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1
# Let's be defensive and abort on every panic
panic = "abort"

[profile.dev]
# Let's be defensive and abort on every panic
panic = "abort"
