// Copyright (c) 2023 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

/*
  This package contains internal service interfaces
 */
package dev.restate.internal;

import "google/protobuf/empty.proto";
import "dev/restate/internal/messages.proto";

service Proxy {
  // Proxy invocation through this service. This service is mostly used for proxying invocations through a specific partition processor, e.g. to reuse the deduplication id map.
  rpc ProxyThrough(ProxyThroughRequest) returns (google.protobuf.Empty);
}

message ProxyThroughRequest {
  string target_service = 1;
  string target_method = 2;
  bytes target_key = 3;
  bytes target_invocation_uuid = 4;

  bytes input = 5;
}

service Awakeables {
  // Resolve an Awakeable with a result value.
  rpc Resolve(ResolveAwakeableRequest) returns (google.protobuf.Empty);
  // Reject an Awakeable with a reason.
  rpc Reject(RejectAwakeableRequest) returns (google.protobuf.Empty);
}

message ResolveAwakeableRequest {
  // Base64 encoded identifier of the Awakeable to resolve.
  string id = 1;
  bytes result = 2;
}

message RejectAwakeableRequest {
  // Base64 encoded identifier of the Awakeable to reject.
  string id = 1;

  // Rejection reason.
  string reason = 2;
}