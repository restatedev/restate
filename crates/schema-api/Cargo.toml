[package]
name = "restate-schema-api"
version.workspace = true
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
publish = false

[features]
default = []

deployment = ["dep:restate-types", "dep:http", "dep:base64", "dep:restate-base64-util", "dep:bytestring", "component"]
mocks = []
serde = ["dep:serde", "dep:serde_with", "dep:restate-serde-util"]
serde_schema = ["serde", "dep:schemars", "restate-types?/schemars", "restate-serde-util?/schema"]
component = ["dep:bytes", "dep:restate-types"]
invocation_target = ["component", "dep:bytes", "dep:restate-types", "dep:thiserror", "dep:http", "dep:restate-serde-util", "dep:bytestring", "dep:itertools"]
subscription = ["dep:anyhow", "dep:restate-types"]

[dependencies]
restate-base64-util = { workspace = true, optional = true }
restate-serde-util = { workspace = true, optional = true }
restate-types = { workspace = true, optional = true }

anyhow = { workspace = true, optional = true }
base64 = { workspace = true, optional = true }
bytes = { workspace = true, optional = true }
bytestring = { workspace = true, optional = true }
http = { workspace = true, optional = true }
itertools = { workspace = true, optional = true }
schemars = { workspace = true, optional = true }
serde = { workspace = true, optional = true }
serde_with = { workspace = true, optional = true }
thiserror = { workspace = true, optional = true }
