// Copyright (c) 2024 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

import "google/protobuf/empty.proto";
import "restate/common.proto";

package restate.metadata_store_svc;

// Grpc service definition for a MetadataStore implementation.
service MetadataStoreSvc {
  // Get a versioned kv-pair
  rpc Get(GetRequest) returns (GetResponse);

  // Get the current version for a kv-pair
  rpc GetVersion(GetRequest) returns (GetVersionResponse);

  // Puts the given kv-pair into the metadata store
  rpc Put(PutRequest) returns (google.protobuf.Empty);

  // Deletes the given kv-pair
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty);

  // Provisions the metadata store with the given input
  rpc Provision(ProvisionRequest) returns (ProvisionResponse);

  // Returns the status of the metadata store svc
  rpc Status(google.protobuf.Empty) returns (StatusResponse);
}

message GetRequest {
  string key = 1;
}

message PutRequest {
  string key = 1;
  VersionedValue value = 2;
  Precondition precondition = 3;
}

message DeleteRequest {
  string key = 1;
  Precondition precondition = 2;
}

message VersionedValue {
  Version version = 1;
  bytes bytes = 2;
}

message GetResponse {
  optional VersionedValue value = 1;
}

message Version {
  uint32 value = 1;
}

message GetVersionResponse {
  optional Version version = 1;
}

enum PreconditionKind {
  PreconditionKind_UNKNOWN = 0;
  NONE = 1;
  DOES_NOT_EXIST = 2;
  MATCHES_VERSION = 3;
}

message Precondition {
  PreconditionKind kind = 1;
  // needs to be set in case of PreconditionKind::MATCHES_VERSION
  optional Version version = 2;
}

message ProvisionRequest {
  bytes nodes_configuration = 1;
}

message ProvisionResponse {
  bool newly_provisioned = 1;
}

message StatusResponse {
  restate.common.MetadataServerStatus status = 1;
  optional MetadataStoreConfiguration configuration = 2;
  optional MemberId leader = 3;
}

message MetadataStoreConfiguration {
  uint32 id = 1;
  repeated MemberId members = 2;
}

message MemberId {
  uint64 node_id = 1;
  uint64 storage_id = 2;
}
