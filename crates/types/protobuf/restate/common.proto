// Copyright (c) 2024 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

package restate.common;

enum ProtocolVersion {
  ProtocolVersion_UNKNOWN = 0;
  FLEXBUFFERS = 1;
}

message NodeId {
  uint32 id = 1;
  optional uint32 generation = 2;
}

// Partition Processor leadership epoch number
message LeaderEpoch { uint64 value = 1; }

// Log sequence number
message Lsn { uint64 value = 1; }

// A generic type for versioned metadata
message Version { uint32 value = 1; }

// The handle name or type tag of the message. For every target there must be
// exactly one message handler implementation.
enum TargetName {
  reserved 7, 8;
  TargetName_UNKNOWN = 0;
  METADATA_MANAGER = 1;
  INGRESS = 2;
  LOCAL_METADATA_STORE = 3;
  LOCAL_METADATA_STORE_CLIENT = 4;
  ATTACH_REQUEST = 5;
  ATTACH_RESPONSE = 6;
  CONTROL_PROCESSORS = 9;
  // LogServer
  LOG_SERVER_STORE = 10;
  LOG_SERVER_STORED = 11;
  LOG_SERVER_RELEASE = 12;
  LOG_SERVER_RELEASED = 13;
  LOG_SERVER_SEAL = 14;
  LOG_SERVER_SEALED = 15;
  LOG_SERVER_GET_LOGLET_INFO = 16;
  LOG_SERVER_LOGLET_INFO = 17;
  LOG_SERVER_GET_RECORDS = 18;
  LOG_SERVER_RECORDS = 19;
  LOG_SERVER_TRIM = 20;
  LOG_SERVER_TRIMMED = 21;
  LOG_SERVER_WAIT_FOR_TAIL = 22;
  LOG_SERVER_TAIL_UPDATED = 23;
  LOG_SERVER_GET_DIGEST = 24;
  LOG_SERVER_DIGEST = 25;
  // Reserving space for more log-server messages
  // ReplicatedLoglet
  REPLICATED_LOGLET_APPEND = 40;
  REPLICATED_LOGLET_APPENDED = 41;
  REPLICATED_LOGLET_GET_SEQUENCER_STATE = 42;
  REPLICATED_LOGLET_SEQUENCER_STATE = 43;
  // Partition Processor
  PARTITION_CREATE_SNAPSHOT_REQUEST = 50;
  PARTITION_CREATE_SNAPSHOT_RESPONSE = 51;
  PARTITION_PROCESSOR_RPC = 52;
  PARTITION_PROCESSOR_RPC_RESPONSE = 53;
  // Node
  NODE_GET_NODE_STATE_REQUEST = 60;
  NODE_GET_NODE_STATE_RESPONSE = 61;
  // Remote Scanner
  REMOTE_QUERY_SCANNER_OPEN = 80;
  REMOTE_QUERY_SCANNER_OPENED = 81;
  REMOTE_QUERY_SCANNER_NEXT = 82;
  REMOTE_QUERY_SCANNER_NEXT_RESULT = 83;
  REMOTE_QUERY_SCANNER_CLOSE = 84;
  REMOTE_QUERY_SCANNER_CLOSED = 85;
}

// ** Health & Per-role Status

enum NodeStatus {
  NodeStatus_UNKNOWN = 0;
  ALIVE = 1;
  // The node is not fully running yet.
  STARTING_UP = 2;
  // The node is performing a graceful shutdown.
  SHUTTING_DOWN = 3;
}

enum WorkerStatus {
  WorkerStatus_UNKNOWN = 0;
  WorkerStatus_READY = 1;
  WorkerStatus_STARTING_UP = 2;
}

enum AdminStatus {
  AdminStatus_UNKNOWN = 0;
  AdminStatus_READY = 1;
  AdminStatus_STARTING_UP = 2;
}

enum LogServerStatus {
  LogServerStatus_UNKNOWN = 0;
  LogServerStatus_READY = 1;
  LogServerStatus_STARTING_UP = 2;
  LogServerStatus_FAILSAFE = 3;
  LogServerStatus_STOPPING = 4;
}

enum MetadataServerStatus {
  MetadataServerStatus_UNKNOWN = 0;
  MetadataServerStatus_READY = 1;
  MetadataServerStatus_STARTING_UP = 2;
}
