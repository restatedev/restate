// Copyright (c) 2024 -  Restate Software, Inc., Restate GmbH.
// All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

import "restate/common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

package restate.cluster;

message ClusterState {
  google.protobuf.Duration last_refreshed = 1;
  restate.common.Version nodes_config_version = 2;
  restate.common.Version partition_table_version = 3;
  map<uint32, NodeState> nodes = 4;
  restate.common.Version logs_metadata_version = 5;
}

message NodeState {
  oneof state {
    AliveNode alive = 1;
    DeadNode dead = 2;
  }
}

message AliveNode {
  restate.common.NodeId generational_node_id = 1;
  google.protobuf.Timestamp last_heartbeat_at = 2;
  map<uint64, PartitionProcessorStatus> partitions = 3;
}

message DeadNode { google.protobuf.Timestamp last_seen_alive = 1; }

enum RunMode {
  RunMode_UNKNOWN = 0;
  LEADER = 1;
  FOLLOWER = 2;
}

enum ReplayStatus {
  ReplayStatus_UNKNOWN = 0;
  STARTING = 1;
  ACTIVE = 2;
  CATCHING_UP = 3;
}

message PartitionProcessorStatus {
  google.protobuf.Timestamp updated_at = 1;
  RunMode planned_mode = 2;
  RunMode effective_mode = 3;
  optional restate.common.LeaderEpoch last_observed_leader_epoch = 4;
  optional restate.common.NodeId last_observed_leader_node = 5;
  optional restate.common.Lsn last_applied_log_lsn = 6;
  optional google.protobuf.Timestamp last_record_applied_at = 7;
  uint64 num_skipped_records = 8;
  ReplayStatus replay_status = 9;
  optional restate.common.Lsn last_persisted_log_lsn = 10;
  // Set if replay_status is CATCHING_UP
  optional restate.common.Lsn target_tail_lsn = 11;
}
