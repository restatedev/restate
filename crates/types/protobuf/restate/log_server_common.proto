
// Copyright (c) 2024 - 2025 Restate Software, Inc., Restate GmbH.
// All rights reserved.
//
// Use of this software is governed by the Business Source License
// included in the LICENSE file.
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0.

syntax = "proto3";

package restate.log_server_common;

enum Status {
  Status_UNKNOWN = 0;
  // Operation was successful
  OK = 1;
  // The node's storage system is disabled and cannot accept operations at the moment.
  DISABLED = 2;
  // If the operation expired or not completed due to load shedding. The operation can be
  // retried by the client. It's guaranteed that this store has not been persisted by the node.
  DROPPED = 3;
  // Operation rejected on a sealed loglet
  SEALED = 4;
  // Loglet is being sealed and operation cannot be accepted
  SEALING = 5;
  // Operation has been rejected. Operation requires that the sender is the authoritative
  // sequencer.
  SEQUENCER_MISMATCH = 6;
  // This indicates that the operation cannot be accepted due to the offset being out of bounds.
  // For instance, if a store is sent to a log-server that with a lagging local commit offset.
  OUT_OF_BOUNDS = 7;
  // The record is malformed, this could be because it has too many records or any other reason
  // that leads the server to reject processing it.
  MALFORMED = 8;
}


message ResponseHeader {
  Status status = 1;
  uint32 local_tail = 2;
  uint32 known_global_tail = 3;
  bool sealed = 4;
}

message DigestEntry {
  uint32 from_offset = 1;
  uint32 to_offset = 2;
  RecordStatus status = 3;
}

enum RecordStatus {
  RecordStatus_UNKNOWN = 0;
  TRIMMED = 1;
  ARCHIVED = 2;
  EXISTS = 3;
}

message Digest {
  ResponseHeader header = 1;
  repeated DigestEntry entries = 2;
}

message LogletInfo {
  ResponseHeader header = 1;
  uint32 trim_point = 2;
}
