// Copyright (c) 2024 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

import "google/protobuf/empty.proto";
import "restate/cluster.proto";
import "restate/common.proto";

package restate.node_ctl_svc;

service NodeCtlSvc {
  // Get identity information from this node.
  rpc GetIdent(google.protobuf.Empty) returns (IdentResponse);

  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse);

  // Provision the Restate cluster on this node.
  rpc ProvisionCluster(ProvisionClusterRequest)
      returns (ProvisionClusterResponse);
}

message ProvisionClusterRequest {
  bool dry_run = 1;
  // if unset then the configured cluster num partitions will be used
  optional uint32 num_partitions = 2;
  // if unset partition replication will default to `everywhere`. Otherwise
  // it's limited to the provided replication property
  optional restate.cluster.ReplicationProperty partition_replication = 3;
  // if unset then the configured cluster default log provider will be used
  optional restate.cluster.BifrostProvider log_provider = 4;
}

message ProvisionClusterResponse {
  bool dry_run = 1;
  restate.cluster.ClusterConfiguration cluster_configuration = 2;
}

message IdentResponse {
  restate.common.NodeStatus status = 1;
  restate.common.NodeId node_id = 2;
  string cluster_name = 3;
  // indicates which roles are enabled on this node
  repeated string roles = 4;
  // Age of the running node in seconds (how many seconds since the daemon
  // started)
  uint64 age_s = 5;
  restate.common.AdminStatus admin_status = 6;
  restate.common.WorkerStatus worker_status = 7;
  restate.common.LogServerStatus log_server_status = 8;
  restate.common.MetadataServerStatus metadata_server_status = 9;
  uint32 nodes_config_version = 10;
  uint32 logs_version = 11;
  uint32 schema_version = 12;
  uint32 partition_table_version = 13;
}

message GetMetadataRequest {
  // If set, we'll first sync with metadata store to esnure we are returning the
  // latest value. Otherwise, we'll return the local value on this node.
  bool sync = 1;
  restate.common.MetadataKind kind = 2;
}

message GetMetadataResponse {
  // polymorphic. The value depends on the MetadataKind requested
  bytes encoded = 1;
}
