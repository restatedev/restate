[package]
name = "restate-tracing-instrumentation"
version.workspace = true
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
publish = false

[features]
default = []
# if enabled, each "crate" will show up
# as it's own service in collectors like `jaeger`
# if not (default) all traces will instead
# show up under one service `restate-server`
service_per_crate = []

options_schema = ["dep:schemars"]
rt-tokio = ["dep:tokio"]
prometheus = [
    "dep:tokio",
    "dep:metrics",
    "dep:metrics-exporter-prometheus",
    "dep:metrics-util",
    "tokio/tracing",
]

[dependencies]
restate-workspace-hack = { workspace = true }

restate-types = { workspace = true }

arc-swap = { workspace = true }
console-subscriber = { version = "0.4.1", features = [ "parking_lot", ], optional = true }
derive_builder = { workspace = true }
futures = { workspace = true }
metrics = { workspace = true, optional = true }
metrics-exporter-prometheus = { workspace = true, optional = true }
metrics-util = { workspace = true, optional = true }
nu-ansi-term = "0.50.1"
opentelemetry = { workspace = true }
opentelemetry-contrib = { workspace = true, features = [ "jaeger_json_exporter", "rt-tokio", ] }
opentelemetry-otlp = { workspace = true, features = ["tls", "tls-roots"] }
opentelemetry-semantic-conventions = { workspace = true }
opentelemetry_sdk = { workspace = true, features = ["rt-tokio"] }
schemars = { workspace = true, optional = true }
serde = { workspace = true }
thiserror = { workspace = true }
tokio = { workspace = true, optional = true }
tonic = { workspace = true }
tracing = { workspace = true }
tracing-appender = { version = "0.2.3", features = ["parking_lot"] }
tracing-core = { version = "0.1" }
tracing-opentelemetry = { workspace = true }
tracing-subscriber = { workspace = true, features = ["json"] }

[dev-dependencies]
restate-types = { workspace = true, features = ["test-util"] }

tokio = { workspace = true }
