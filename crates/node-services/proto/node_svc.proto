// Copyright (c) 2024 - Restate Software, Inc., Restate GmbH
//
// This file is part of the Restate service protocol, which is
// released under the MIT license.
//
// You can find a copy of the license in file LICENSE in the root
// directory of this repository or package, or at
// https://github.com/restatedev/proto/blob/main/LICENSE

syntax = "proto3";

import "google/protobuf/empty.proto";
import "common.proto";
import "node.proto";

package dev.restate.node_svc;

service NodeSvc {
  // Get identity information from this node.
  rpc GetIdent(google.protobuf.Empty) returns (IdentResponse);

  // Terminate the specified invocation
  rpc TerminateInvocation(TerminationRequest) returns (google.protobuf.Empty);

  // Mutate the specified state
  rpc MutateState(StateMutationRequest) returns (google.protobuf.Empty);

  // Queries the storage of the worker and returns the result as a stream of
  // responses
  rpc QueryStorage(StorageQueryRequest) returns (stream StorageQueryResponse);

  // Updates the schema information on the worker node
  rpc UpdateSchemas(UpdateSchemaRequest) returns (google.protobuf.Empty);
}

enum NodeStatus {
  NodeStatus_UNKNOWN = 0;
  ALIVE = 1;
  // The node is not fully running yet.
  STARTING_UP = 2;
  // The node is performing a graceful shutdown.
  SHUTTING_DOWN = 3;
}

message IdentResponse {
  NodeStatus status = 1;
  dev.restate.common.NodeId node_id = 2;
}

message TerminationRequest {
  // todo: Replace with proper protobuf
  bytes invocation_termination = 1;
}

message StateMutationRequest {
  // todo: Replace with proper protobuf
  bytes state_mutation = 1;
}

message StorageQueryRequest { string query = 1; }

message StorageQueryResponse {
  bytes header = 1;
  bytes data = 2;
}

message UpdateSchemaRequest { bytes schema_bin = 1; }
