# We do this manually instead of using dist's native npm functionality because this way, the binary is actually hosted on npm, instead
# of being downloaded as a postinstall step. Also so that we can set --tag next on prerelease.

name: Publish npm binary packages

on:
  workflow_call:
    inputs:
      # comes from cargo-dist workflow call
      plan:
        required: true
        type: string

env:
  PLAN: ${{ inputs.plan }}

jobs:
  publish-npm-binaries:
    permissions:
      contents: read
      packages: read
    runs-on: warp-ubuntu-latest-x64-2x
    strategy:
      matrix:
        app_name:
          - restate-cli
          - restatectl
          - restate-server
        build:
          - target: aarch64-apple-darwin
            node_arch: arm64
            node_os: darwin
          - target: x86_64-apple-darwin
            node_arch: x64
            node_os: darwin
          - target: x86_64-unknown-linux-musl
            node_arch: x64
            node_os: linux
          - target: aarch64-unknown-linux-musl
            node_arch: arm64
            node_os: linux

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"

      - name: "Download GitHub Artifacts"
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          merge-multiple: true

      - name: Extract binaries
        run: tar -xvf ${{ matrix.app_name }}-${{ matrix.build.target }}.tar.xz

      - name: Publish to NPM
        shell: bash
        run: |
          bin="$(echo "$PLAN" | jq -r '.artifacts["${{ matrix.app_name }}-${{ matrix.build.target }}.tar.xz"].assets[] | select(.kind == "executable").name')"
          tag="${{ fromJson(inputs.plan).announcement_is_prerelease && 'next' || 'latest' }}"

          cd npm
          node_os="${{ matrix.build.node_os }}"
          export node_os
          node_arch="${{ matrix.build.node_arch }}"
          export node_arch
          # set the version
          node_version=$(echo "$PLAN" | jq -r '.releases[] | select(.app_name == "${{ matrix.app_name }}").app_version')"
          export node_version
          # set the package name
          export node_pkg="${bin}-${node_os}-${node_arch}"
          if npm view "@restatedev/${node_pkg}@${node_version}"
          then
            continue
          fi
          # create the package directory
          mkdir -p "${node_pkg}/bin"
          # generate package.json from the template
          envsubst < package.json.tmpl > "${node_pkg}/package.json"
          # copy the binary into the package
          dir="../${{ matrix.app_name }}-${{ matrix.target }}"
          cp "${dir}/${bin}" "${node_pkg}/bin"
          cp "${dir}/NOTICE" "${node_pkg}"
          cp "${dir}/LICENSE" "${node_pkg}"
          cp "${dir}/README.md" "${node_pkg}"
          # publish the package
          pushd "${node_pkg}"
          npm publish --access public --tag "${tag}"
          popd
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-npm-base:
    needs: publish-npm-binaries
    runs-on: warp-ubuntu-latest-x64-2x
    strategy:
      matrix:
        app_name:
          - restate-cli
          - restatectl
          - restate-server
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"

      - name: Publish to npm
        shell: bash
        run: |
          node_version=$(echo "$PLAN" | jq -r '.releases[] | select(.app_name == "${{ matrix.app_name }}").app_version')"
          bin="$(echo "$PLAN" | jq -r '.artifacts["${{ matrix.package.artifact }}-${{ matrix.build.target }}.tar.xz"].assets[] | select(.kind == "executable").name')"
          tag="${{ fromJson(inputs.plan).announcement_is_prerelease && 'next' || 'latest' }}"

          cd npm
          if npm view "@restatedev/${bin}@${node_version}"
          then
            continue
          fi
          pushd "${bin}"
          sed -i "s/\"version\": \".*\",/\"version\": \"${node_version}\",/" package.json
          for os in linux darwin
          do
            for arch in x64 arm64
            do
              sed -i "s|\"@restatedev/${bin}-${os}-${arch}\": \".*\"|\"@restatedev/${bin}-${os}-${arch}\": \"${node_version}\"|" package.json
            done
          done
          curl https://raw.githubusercontent.com/restatedev/restate/main/README.md -o README.md
          npm install
          npm run build
          npm publish --access public --tag "${tag}"
          popd
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
